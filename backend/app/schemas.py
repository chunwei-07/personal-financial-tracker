from pydantic import BaseModel
from datetime import datetime
from typing import Optional, List

# Base schema with fields common to both creating and reading transactions
class TransactionBase(BaseModel):
    type: str
    amount: float
    category: str
    description: Optional[str] = None
    from_account: Optional[str] = None
    to_account: Optional[str] = None

# Schema for new transaction
class TransactionCreate(TransactionBase):
    pass

# Schema for reading transaction
# Includes fields that are generated by the database
class Transaction(TransactionBase):
    id: int
    date: datetime

    # This tells Pydantic to read the data even if it's not a dict
    # but an ORM model (SQLAlchemy model)
    class Config:
        from_attributes = True

class CategoryBase(BaseModel):
    name: str
    type: str

class CategoryCreate(CategoryBase):
    pass

class Category(CategoryBase):
    id: int
    class Config:
        from_attributes = True

class AccountBase(BaseModel):
    name: str

class AccountCreate(AccountBase):
    pass

class Account(AccountBase):
    id: int
    class Config:
        from_attributes = True

class TransactionPage(BaseModel):
    total_count: int
    transactions: List[Transaction]

class NetWorthHistory(BaseModel):
    date: datetime
    value: float

    class Config:
        from_attributes = True

class RecurringTransactionBase(BaseModel):
    day_of_month: int
    type: str
    amount: float
    category: str
    description: str
    from_account: Optional[str] = None
    to_account: Optional[str] = None

class RecurringTransactionCreate(RecurringTransactionBase):
    pass

class RecurringTransaction(RecurringTransactionBase):
    id: int
    last_processed_date: Optional[datetime] = None

    class Config:
        from_attributes = True

class BudgetBase(BaseModel):
    category_name: str
    amount: float

class BudgetCreate(BudgetBase):
    pass

class Budget(BudgetBase):
    id: int

    class Config:
        from_attributes = True

# This defines the shape of the data for dashboard view
class BudgetStatus(BaseModel):
    category_name: str
    budgeted_amount: float
    spent_amount: float
    remaining_amount: float